---
#
# default configuration file for binance-reporting package
#

modules:
  # mandatory
  # defines the modules to be run
  # 'yes' means this module will run, 'no' means it wont
  # instead of 'no', you can as well remove the line
  balances: yes
  daily_account_snapshots: yes
  trades: yes
  orders: yes
  open_orders: yes
  deposits: yes
  withdrawals: yes
  ticker: yes
  prices: yes
  klines: yes # if klines is 'yes', a separate section 'klines' is expected to provede specific config details

klines:
  # name of directory, in which the klines data should be stored
  # this is a sub-directory of the location from where the python script has been started
  dir: klines_data
  # list of intervals, for which klines should be downloaded
  # no download if it is empty
  intervals: ['5m', '1d']
  # list of symbols, for which klines should be downloaded
  # if empty, all the tradingpairs will be taken from the exchange
  # you can also only provide a text, which needs to be included 
  # in the trading symbol, e.g. 'USDT' would only take those 
  # trading pairs, which have USDT included, e.g. BTCUSDT, ADAUSDT etc
  # you can as well provide several items, like ['USDT', 'USDC', 'BTC']
  symbols: ['USDT']
  # technical indicators can be added. These are based on the finta module https://github.com/peerchemist/finta
  # you can add as many indicators as you want, as long as you provide the name in the list above and the parameters in the details below
  # the parameters need to be the same as the finta module requires them
  indicators: ['RSI', 'EMA']
  # list of config parameters expected by the indicator according to the finta module
  # for 'period', you can provide a list of periods and they will be added
  indicators_config:
    RSI:
      period: [14]
    EMA:
      period: [20, 50, 100, 200] # you can specify more than one timeframe, and a separate column will be added to the csv
    WILLIAMSR:
      period: [14]

accounts:
  JAN:
    dir: JAN
    type: SPOT
    osvar_api_public: READ_PUBLIC_JAN_SPOT
    osvar_api_secret: READ_SECRET_JAN_SPOT
    chat_pseudo: Jan
    chat_id: '@SwissCryptoTrader_0002'
    investment: 8896
    cash: 0
    portval: 0
    profit: 0
  JAN-FUT:
    dir: JAN
    type: FUTURES
    osvar_api_public: READ_PUBLIC_JAN_FUTURES
    osvar_api_secret: READ_SECRET_JAN_FUTURES
    chat_pseudo: JanF
    chat_id: '@SwissCryptoTrader_0003'
    investment: 6438.70955153
    cash: 0
    portval: 0
    profit: 0
  JAN-COINS:
    dir: JAN
    type: SPOT
    osvar_api_public: READ_PUBLIC_JAN_COINS_SPOT
    osvar_api_secret: READ_SECRET_JAN_COINS_SPOT
    chat_pseudo: JanC
    chat_id: '@SwissCryptoTrader_0004'
    investment: 0
    cash: 0
    portval: 0
    profit: 0
  RITA:
    dir: RITA
    type: SPOT
    osvar_api_public: READ_PUBLIC_RITA_SPOT
    osvar_api_secret: READ_SECRET_RITA_SPOT
    chat_pseudo: Rit
    chat_id: '@SwissCryptoTrader_0004'
    investment: 18251
    cash: 0
    portval: 0
    profit: 0
  RITA-FUT:
    dir: RITA
    type: FUTURES
    osvar_api_public: READ_PUBLIC_RITA_FUTURES
    osvar_api_secret: READ_SECRET_RITA_FUTURES
    chat_pseudo: RitF
    chat_id: '@SwissCryptoTrader_0003'
    investment: 9676.48862635
    cash: 0
    portval: 0
    profit: 0
  JAKOB:
    dir: JAKOB
    type: SPOT
    osvar_api_public: READ_PUBLIC_JAKOB_SPOT
    osvar_api_secret: READ_SECRET_JAKOB_SPOT
    chat_pseudo: Jak
    chat_id: '@SwissCryptoTrader_0002'
    investment: 8411
    cash: 0
    portval: 0
    profit: 0

account_groups:
  ALL:
    accounts: [JAN, RITA, JAKOB, JAN-FUT, RITA-FUT]
    chat_id: '@SwissCryptoTrader_0001'
    chat_pseudo: all
  HODL:
    accounts: [RITA, JAN-COINS]
    chat_id: '@SwissCryptoTrader_0004'
    chat_pseudo: hodl-all
  TRADE-FUT:
    accounts: [JAN-FUT, RITA-FUT]
    chat_id: '@SwissCryptoTrader_0003'
    chat_pseudo: fut-all
  TRADE-SPOT:
    accounts: [JAN, JAKOB]
    chat_id: '@SwissCryptoTrader_0002'
    chat_pseudo: spot-all
    
logging:
  # used for writing status messages
  # activate logging or not: yes/no
  log_activate: yes
  # log levels could be: DEBUG, INFO, WARNING, ERROR, CRITICAL
  log_level: INFO
  # log target can be set to file or console
  log_target: console
  # in case log_target is set to file, this file will be used in log/ folder
  log_file : binance-reporting.log

telegram:
  # used for pushing notifications to Telegram
  # make sure this one has access to the telegram channel you want to post to
  # the telegram channel need to be public
  token: 929664379:AAE-LEy0M4B-zKBdNfyH6Slc8vDDU7tuQSk

download_daily_account_snapshots:
  # Binance only saves snapshots only for last 180 days
  # this can be shortened here to reduce load on API
  # snapshots older than 180 days are saved in the csv file
  snapshot_days_max: 180
  # amount of snapshot days per request to exchange
  # max value is 30 (given from Binance)
  # this can be set to less than 30 in case of connection errors
  snapshot_days_per_request: 30
